# Auto-generated by repobuild, do not modify directly.

# Environment flag settings.
ROOT_DIR := $(shell pwd)
# Some compiler specific flag settings.
CXX_GCC := $(shell echo $$($(CXX) --version | egrep '(gcc|g\+\+)' | head -n 1 | wc -l))
CC_GCC := $(shell echo $$($(CC) --version | egrep '(gcc|g\+\+|^cc)' | head -n 1 | wc -l))
ifeq ($(CC_GCC),1)
	CFLAGS= -pthread -g -Wall -Werror -Wno-sign-compare -Wno-unused-local-typedefs -Wno-error=unused-local-typedefs -O3 -flto
	BASIC_CFLAGS= -pthread
else
	CFLAGS= -stdlib=libc++ -pthread -g -Wall -Werror -Wno-sign-compare -O3 -flto -Qunused-arguments -fcolor-diagnostics
	BASIC_CFLAGS= -stdlib=libc++ -pthread -Qunused-arguments
endif
ifeq ($(CXX_GCC),1)
	LD_FORCE_LINK_START := -Wl,--whole-archive
	LD_FORCE_LINK_END := -Wl,--no-whole-archive
	LDFLAGS= -lpthread -g -O3 -flto -L/usr/local/lib -L/opt/local/lib
	CXXFLAGS= -pthread -g -Wall -Werror -Wno-sign-compare -Wno-unused-local-typedefs -Wno-error=unused-local-typedefs -O3 -flto -std=c++11 -DUSE_CXX0X
	BASIC_CXXFLAGS= -pthread -std=c++11
else
	LD_FORCE_LINK_START := -Wl,-force_load
	LD_FORCE_LINK_END := 
	LDFLAGS= -stdlib=libc++ -lpthread -g -O3 -flto -L/usr/local/lib -L/opt/local/lib
	CXXFLAGS= -stdlib=libc++ -pthread -g -Wall -Werror -Wno-sign-compare -O3 -flto -Qunused-arguments -fcolor-diagnostics -std=c++11 -DUSE_CXX0X
	BASIC_CXXFLAGS= -stdlib=libc++ -pthread -Qunused-arguments -std=c++11
endif

# Some platform specific flag settings.
IS_DARWIN := $(shell echo $$(uname | grep 'Darwin' | wc -l))
IS_DARWIN_AND_CLANG := $(shell echo $$((($(IS_DARWIN) == 1 && $(CXX_GCC) == 0))))
ifeq ($(IS_DARWIN_AND_CLANG),1)
	SHARED_LIB_ARGS_R:=awk '{print "-dynamiclib -current_version "$$3" -compatibility_version "$$4}'
	SHARED_LIB_ARGS_MI:=awk '{print "-dynamiclib -current_version "$$3}'
	SHARED_LIB_ARGS_MA:=awk '{print "-dynamiclib"}'
	SHARED_LIB_ARGS:=awk '{print "-dynamiclib"}'
	SHARED_LIB_NAME_R:=awk '{print "lib"$$1"."$$2"."$$3"."$$4".dylib"}'
	SHARED_LIB_NAME_MI:=awk '{print "lib"$$1"."$$2"."$$3".dylib"}'
	SHARED_LIB_NAME_MA:=awk '{print "lib"$$1"."$$2".dylib"}'
	SHARED_LIB_NAME:=awk '{print "lib"$$1".dylib"}'
else
	SHARED_LIB_ARGS_R:=awk '{print "-shared -Wl,-soname,lib"$$1".so."$$2}'
	SHARED_LIB_ARGS_MI:=awk '{print "-shared -Wl,-soname,lib"$$1".so."$$2}'
	SHARED_LIB_ARGS_MA:=awk '{print "-shared -Wl,-soname,lib"$$1".so."$$2}'
	SHARED_LIB_ARGS:=awk '{print "-shared -Wl,-soname,lib"$$1".so"}'
	SHARED_LIB_NAME_R:=awk '{print "lib"$$1".so."$$2"."$$3"."$$4}'
	SHARED_LIB_NAME_MI:=awk '{print "lib"$$1".so."$$2"."$$3}'
	SHARED_LIB_NAME_MA:=awk '{print "lib"$$1".so."$$2}'
	SHARED_LIB_NAME:=awk '{print "lib"$$1".so"}'
endif
define PythonSetup
aW1wb3J0IG9zCmZyb20gc2V0dXB0b29scyBpbXBvcnQgc2V0dXAKCnNldHVwKAogICAgbmFtZSA9IG9zLmVudmlyb25bJ1BZX05BTUUnXSwKICAgIHZlcnNpb24gPSBvcy5lbnZpcm9uWydQWV9WRVJTSU9OJ10sCiAgICBweV9tb2R1bGVzID0gb3MuZW52aXJvblsnUFlfTU9EVUxFUyddLnNwbGl0KCksCiAgICBpbnN0YWxsX3JlcXVpcmVzID0gb3MuZW52aXJvblsnUFlfU1lTX0RFUFMnXS5zcGxpdCgpLAopCg==
endef
export PythonSetup

.gen-pkg/base_setup.py: 
	@mkdir -p .gen-pkg
	@echo "$$PythonSetup" | base64 --decode > .gen-pkg/base_setup.py
	@chmod 0755 .gen-pkg/base_setup.py

define CCEmbed
IyEvYmluL2Jhc2gKSEVBREVSPSIkMSIKQ1BQPSIkMiIKR1VBUkQ9IiQzIgpOQU1FU1BBQ0VfU1RBUlQ9IiQ0IgpOQU1FU1BBQ0VfRU5EPSIkNSIKZWNobyAiI2lmbmRlZiAkR1VBUkQiID4gJEhFQURFUgplY2hvICIjZGVmaW5lICRHVUFSRCIgPj4gJEhFQURFUgplY2hvICIjaW5jbHVkZSA8Y3N0cmluZz4gIC8vIHNpemVfdCIgPj4gJEhFQURFUgplY2hvICIkTkFNRVNQQUNFX1NUQVJUIiA+PiAkSEVBREVSCmVjaG8gIiNpbmNsdWRlIFwiJChiYXNlbmFtZSAkSEVBREVSKVwiIiA+ICRDUFAKZWNobyAiJE5BTUVTUEFDRV9TVEFSVCIgPj4gJENQUAp3aGlsZSByZWFkIFNPVVJDRSBWQVJJQUJMRTsgZG8gIGVjaG8gIi8vIEF1dG8gZ2VuZXJhdGVkIGZyb20gJFNPVVJDRSIgPj4gJEhFQURFUgogIGVjaG8gImV4dGVybiBjb25zdCBjaGFyKiAiJFZBUklBQkxFIl9kYXRhKCk7IiA+PiAkSEVBREVSCiAgZWNobyAiZXh0ZXJuIHNpemVfdCAiJFZBUklBQkxFIl9zaXplKCk7IiA+PiAkSEVBREVSCiAgZWNobyAiIiA+PiAkSEVBREVSCiAgZWNobyAiY29uc3QgY2hhciogIiRWQVJJQUJMRSJfZGF0YSgpIHsiID4+ICRDUFAKICBwcmludGYgIiAgcmV0dXJuIFwiIiA+PiAkQ1BQCiAgY2F0ICRTT1VSQ0UgICAgIHwgcGVybCAtcGUgJ3N8XFx8XFxcXHxnJyAgICAgfCBwZXJsIC1wZSAnc3xcInxcXCJ8ZycgICAgIHwgcGVybCAtcGUgJ3N8XG58XFxufGcnID4+ICRDUFAKICBlY2hvICJcIjsiID4+ICRDUFAKICBlY2hvICJ9IiA+PiAkQ1BQCiAgZWNobyAic2l6ZV90ICIkVkFSSUFCTEUiX3NpemUoKSIgeyA+PiAkQ1BQCiAgcHJpbnRmICIgIHJldHVybiAiID4+ICRDUFAKICBwcmludGYgJChjYXQgJFNPVVJDRSB8IHdjIC1jKSA+PiAkQ1BQCiAgZWNobyAiOyIgPj4gJENQUAogIGVjaG8gIn0iID4+ICRDUFAKZG9uZQplY2hvICIkTkFNRVNQQUNFX0VORCIgPj4gJEhFQURFUgplY2hvICIjZW5kaWYgIC8vICRHVUFSRCIgPj4gJEhFQURFUgplY2hvICIkTkFNRVNQQUNFX0VORCIgPj4gJENQUAo=
endef
export CCEmbed

.gen-files/cc_embed.sh: 
	@mkdir -p .gen-files
	@echo "$$CCEmbed" | base64 --decode > .gen-files/cc_embed.sh
	@chmod 0755 .gen-files/cc_embed.sh

define FlockScript
IyEvdXNyL2Jpbi9wZXJsIAojIGJhc2ljYWxseSBmbG9jaywgbW9kaWZpZWQgZnJvbSBzb3VyY2Ugb24gdGhlIHdlYi4KCnVzZSB3YXJuaW5nczsKdXNlIHN0cmljdDsKdXNlIEZjbnRsIHF3KDpmbG9jayk7CgpteSAkbG9ja2ZpbGUgPSBzaGlmdDsKbXkgJGNvbW1hbmQgPSBqb2luKCIgIixAQVJHVik7CgppZiAoISRsb2NrZmlsZSB8fCAhJGNvbW1hbmQpIHsKICAgIGRpZSgidXNhZ2U6ICQwIDxmaWxlPiA8Y29tbWFuZD5cbiIpOwp9CgpvcGVuKEZILCRsb2NrZmlsZSkgfHwgZGllKCQhKTsgCmZsb2NrKEZILExPQ0tfRVgpIHx8IGRpZSgkISk7Cm15ICRyZXR2YWwgPSAwOwpzeXN0ZW0oJGNvbW1hbmQpID09IDAgb3IgJHJldHZhbCA9ICQ/ID4+IDg7CmZsb2NrKEZILExPQ0tfVU4pOyAKZXhpdCgkcmV0dmFsKTsK
endef
export FlockScript

.gen-files/flock_script.pl: 
	@mkdir -p .gen-files
	@echo "$$FlockScript" | base64 --decode > .gen-files/flock_script.pl
	@chmod 0755 .gen-files/flock_script.pl


.gen-src/common: .gen-files/.dummy.prereqs
	@mkdir -p .gen-src; [ -d common ] || mkdir -p common; ln -f -s ../common .gen-src/common


.gen-src/common/.dummy: .gen-src/common .gen-files/.dummy.prereqs
	@[ -f .gen-src/common/.dummy ] || touch .gen-src/common/.dummy


.gen-src/.gen-pkg/common: .gen-files/.dummy.prereqs
	@mkdir -p .gen-src/.gen-pkg; [ -d .gen-pkg/common ] || mkdir -p .gen-pkg/common; ln -f -s ../../.gen-pkg/common .gen-src/.gen-pkg/common


.gen-src/.gen-pkg/common/.dummy: .gen-src/.gen-pkg/common .gen-files/.dummy.prereqs
	@[ -f .gen-src/.gen-pkg/common/.dummy ] || touch .gen-src/.gen-pkg/common/.dummy


.gen-src/.gen-files/common: .gen-files/.dummy.prereqs
	@mkdir -p .gen-src/.gen-files; [ -d .gen-files/common ] || mkdir -p .gen-files/common; ln -f -s ../../.gen-files/common .gen-src/.gen-files/common


.gen-src/.gen-files/common/.dummy: .gen-src/.gen-files/common .gen-files/.dummy.prereqs
	@[ -f .gen-src/.gen-files/common/.dummy ] || touch .gen-src/.gen-files/common/.dummy

common/auto_.0: .gen-src/common .gen-src/.gen-pkg/common .gen-src/.gen-files/common

.PHONY: common/auto_.0

c_compile_args.common/third_party/google/gflags/gflags := 
ifeq ($(CC_GCC),1)
	c_compile_args.common/third_party/google/gflags/gflags := -Wno-error=unused-local-typedefs
endif

c_header_compile_args.common/third_party/google/gflags/gflags := -Icommon/third_party/google/gflags/src

cxx_compile_args.common/third_party/google/gflags/gflags := 
ifeq ($(CXX_GCC),1)
	cxx_compile_args.common/third_party/google/gflags/gflags := -Wno-error=unused-local-typedefs
endif

cxx_header_compile_args.common/third_party/google/gflags/gflags := -Icommon/third_party/google/gflags/src

headers.common/third_party/google/gflags/gflags := common/third_party/google/gflags/src/util.h common/third_party/google/gflags/src/google/gflags.h common/third_party/google/gflags/src/google/gflags_completions.h


.gen-obj/common/third_party/google/gflags/src/gflags.cc.o: .gen-src/common/.dummy .gen-src/.gen-files/common/.dummy .gen-src/.gen-pkg/common/.dummy $(headers.common/third_party/google/gflags/gflags) common/third_party/google/gflags/src/gflags.cc .gen-files/.dummy.prereqs
	@mkdir -p .gen-obj/common/third_party/google/gflags/src
	@echo "Compiling:  common/third_party/google/gflags/src/gflags.cc (c++)"
	@$(COMPILE.cc) -I -I. -I.gen-files -I.gen-src -I.gen-src/.gen-files $(cxx_header_compile_args.common/third_party/google/gflags/gflags) $(cxx_compile_args.common/third_party/google/gflags/gflags) common/third_party/google/gflags/src/gflags.cc -o .gen-obj/common/third_party/google/gflags/src/gflags.cc.o


.gen-obj/common/third_party/google/gflags/src/gflags_completions.cc.o: .gen-src/common/.dummy .gen-src/.gen-files/common/.dummy .gen-src/.gen-pkg/common/.dummy $(headers.common/third_party/google/gflags/gflags) common/third_party/google/gflags/src/gflags_completions.cc .gen-files/.dummy.prereqs
	@mkdir -p .gen-obj/common/third_party/google/gflags/src
	@echo "Compiling:  common/third_party/google/gflags/src/gflags_completions.cc (c++)"
	@$(COMPILE.cc) -I -I. -I.gen-files -I.gen-src -I.gen-src/.gen-files $(cxx_header_compile_args.common/third_party/google/gflags/gflags) $(cxx_compile_args.common/third_party/google/gflags/gflags) common/third_party/google/gflags/src/gflags_completions.cc -o .gen-obj/common/third_party/google/gflags/src/gflags_completions.cc.o


.gen-obj/common/third_party/google/gflags/src/gflags_nc.cc.o: .gen-src/common/.dummy .gen-src/.gen-files/common/.dummy .gen-src/.gen-pkg/common/.dummy $(headers.common/third_party/google/gflags/gflags) common/third_party/google/gflags/src/gflags_nc.cc .gen-files/.dummy.prereqs
	@mkdir -p .gen-obj/common/third_party/google/gflags/src
	@echo "Compiling:  common/third_party/google/gflags/src/gflags_nc.cc (c++)"
	@$(COMPILE.cc) -I -I. -I.gen-files -I.gen-src -I.gen-src/.gen-files $(cxx_header_compile_args.common/third_party/google/gflags/gflags) $(cxx_compile_args.common/third_party/google/gflags/gflags) common/third_party/google/gflags/src/gflags_nc.cc -o .gen-obj/common/third_party/google/gflags/src/gflags_nc.cc.o


.gen-obj/common/third_party/google/gflags/src/gflags_reporting.cc.o: .gen-src/common/.dummy .gen-src/.gen-files/common/.dummy .gen-src/.gen-pkg/common/.dummy $(headers.common/third_party/google/gflags/gflags) common/third_party/google/gflags/src/gflags_reporting.cc .gen-files/.dummy.prereqs
	@mkdir -p .gen-obj/common/third_party/google/gflags/src
	@echo "Compiling:  common/third_party/google/gflags/src/gflags_reporting.cc (c++)"
	@$(COMPILE.cc) -I -I. -I.gen-files -I.gen-src -I.gen-src/.gen-files $(cxx_header_compile_args.common/third_party/google/gflags/gflags) $(cxx_compile_args.common/third_party/google/gflags/gflags) common/third_party/google/gflags/src/gflags_reporting.cc -o .gen-obj/common/third_party/google/gflags/src/gflags_reporting.cc.o

common/third_party/google/gflags/gflags: .gen-obj/common/third_party/google/gflags/src/gflags.cc.o .gen-obj/common/third_party/google/gflags/src/gflags_completions.cc.o .gen-obj/common/third_party/google/gflags/src/gflags_nc.cc.o .gen-obj/common/third_party/google/gflags/src/gflags_reporting.cc.o common/auto_.0

.PHONY: common/third_party/google/gflags/gflags

headers.common/base/flags := common/base/flags.h

common/base/flags: common/third_party/google/gflags/gflags common/auto_.0

.PHONY: common/base/flags


.gen-obj/common/third_party/google/glog/.glog_gen.0.dummy: .gen-src/common/.dummy .gen-src/.gen-files/common/.dummy .gen-src/.gen-pkg/common/.dummy $(headers.common/third_party/google/gflags/gflags) .gen-obj/common/third_party/google/gflags/src/gflags.cc.o .gen-obj/common/third_party/google/gflags/src/gflags_completions.cc.o .gen-obj/common/third_party/google/gflags/src/gflags_nc.cc.o .gen-obj/common/third_party/google/gflags/src/gflags_reporting.cc.o .gen-files/.dummy.prereqs
	@echo "Autoconf:   //common/third_party/google/glog:glog_gen.0"
	@(mkdir -p .gen-files/common/third_party/google/glog; cd common/third_party/google/glog; GEN_DIR="$(ROOT_DIR)/.gen-files/common/third_party/google/glog"; OBJ_DIR="$(ROOT_DIR)/.gen-obj/common/third_party/google/glog"; SRC_DIR="$(ROOT_DIR)/.gen-src/common/third_party/google/glog" ROOT_DIR="$(ROOT_DIR)"  CXX_GCC="$(CXX_GCC)" CC_GCC="$(CC_GCC)" CC="$(CC)" CXX="$(CXX)" CXXFLAGS="$(CXXFLAGS)" BASIC_CXXFLAGS="$(BASIC_CXXFLAGS)" CFLAGS="$(CFLAGS)" BASIC_CFLAGS="$(BASIC_CFLAGS)" LDFLAGS="$(LDFLAGS)" MAKE="$(MAKE)" GFLAGS_OBJS=".gen-obj/common/third_party/google/gflags/src/*.o" GFLAGS_SRC_ROOT="common/third_party/google/gflags/src" DEP_CXXFLAGS="$(cxx_header_compile_args.common/third_party/google/gflags/gflags)" DEP_CFLAGS="$(c_header_compile_args.common/third_party/google/gflags/gflags)" eval '(mkdir -p $$OBJ_DIR; DEST_DIR=$$GEN_DIR;  CXXFLAGS="$$BASIC_CXXFLAGS $$DEP_FLAGS $$USER_CXXFLAGS" CFLAGS="$$BASIC_CFLAGS $$DEP_FLAGS $$USER_CFLAGS" LDFLAGS="$$LDFLAGS $$USER_LDFLAGS" CC="$$CC" CXX="$$CXX" ./configure --prefix=/ --cache-file=$$GEN_DIR/config.cache $(CONFIGURE_ARGS.common/third_party/google/glog/glog_gen))' > $(ROOT_DIR)/.gen-files/common/third_party/google/glog.glog_gen.0.logfile 2>&1 || (cat $(ROOT_DIR)/.gen-files/common/third_party/google/glog.glog_gen.0.logfile; exit 1) ) && (mkdir -p .gen-obj/common/third_party/google/glog; touch .gen-obj/common/third_party/google/glog/.glog_gen.0.dummy)

common/third_party/google/glog/glog_gen.0: .gen-obj/common/third_party/google/glog/.glog_gen.0.dummy common/third_party/google/gflags/gflags common/auto_.0

.PHONY: common/third_party/google/glog/glog_gen.0


.gen-obj/common/third_party/google/glog/.glog_gen.1.0.dummy: .gen-obj/common/third_party/google/glog/.glog_gen.0.dummy .gen-src/common/.dummy .gen-src/.gen-files/common/.dummy .gen-src/.gen-pkg/common/.dummy $(headers.common/third_party/google/gflags/gflags) .gen-obj/common/third_party/google/gflags/src/gflags.cc.o .gen-obj/common/third_party/google/gflags/src/gflags_completions.cc.o .gen-obj/common/third_party/google/gflags/src/gflags_nc.cc.o .gen-obj/common/third_party/google/gflags/src/gflags_reporting.cc.o .gen-files/.dummy.prereqs
	@echo "Make:       //common/third_party/google/glog:glog_gen.1.0"
	@(mkdir -p .gen-files/common/third_party/google/glog; cd common/third_party/google/glog; GEN_DIR="$(ROOT_DIR)/.gen-files/common/third_party/google/glog"; OBJ_DIR="$(ROOT_DIR)/.gen-obj/common/third_party/google/glog"; SRC_DIR="$(ROOT_DIR)/.gen-src/common/third_party/google/glog" ROOT_DIR="$(ROOT_DIR)"  CXX_GCC="$(CXX_GCC)" CC_GCC="$(CC_GCC)" CC="$(CC)" CXX="$(CXX)" CXXFLAGS="$(CXXFLAGS)" BASIC_CXXFLAGS="$(BASIC_CXXFLAGS)" CFLAGS="$(CFLAGS)" BASIC_CFLAGS="$(BASIC_CFLAGS)" LDFLAGS="$(LDFLAGS)" MAKE="$(MAKE)" GFLAGS_OBJS=".gen-obj/common/third_party/google/gflags/src/*.o" GFLAGS_SRC_ROOT="common/third_party/google/gflags/src" DEP_CXXFLAGS="$(cxx_header_compile_args.common/third_party/google/gflags/gflags)" DEP_CFLAGS="$(c_header_compile_args.common/third_party/google/gflags/gflags)" eval '($$MAKE DESTDIR=$$GEN_DIR -f Makefile install)' > $(ROOT_DIR)/.gen-files/common/third_party/google/glog.glog_gen.1.0.logfile 2>&1 || (cat $(ROOT_DIR)/.gen-files/common/third_party/google/glog.glog_gen.1.0.logfile; exit 1) ) && (mkdir -p .gen-obj/common/third_party/google/glog; touch .gen-obj/common/third_party/google/glog/.glog_gen.1.0.dummy)

common/third_party/google/glog/glog_gen.1.0: .gen-obj/common/third_party/google/glog/.glog_gen.1.0.dummy common/third_party/google/glog/glog_gen.0 common/third_party/google/gflags/gflags common/auto_.0

.PHONY: common/third_party/google/glog/glog_gen.1.0


.gen-files/common/third_party/google/glog/lib/libglog.a: .gen-obj/common/third_party/google/glog/.glog_gen.1.0.dummy .gen-files/.dummy.prereqs

common/third_party/google/glog/glog_gen.1: common/third_party/google/glog/glog_gen.0 common/third_party/google/gflags/gflags common/third_party/google/glog/glog_gen.1.0 common/auto_.0

.PHONY: common/third_party/google/glog/glog_gen.1

CONFIGURE_ARGS.common/third_party/google/glog/glog_gen := --with-gflagssrc="$$ROOT_DIR/$$GFLAGS_SRC_ROOT" --with-gflagslib="$$ROOT_DIR/$$GFLAGS_OBJS"

common/third_party/google/glog/glog_gen: common/third_party/google/gflags/gflags common/third_party/google/glog/glog_gen.0 common/third_party/google/glog/glog_gen.1 common/auto_.0

.PHONY: common/third_party/google/glog/glog_gen

common/third_party/google/glog/glog: common/third_party/google/glog/glog_gen common/auto_.0

.PHONY: common/third_party/google/glog/glog

headers.common/log/log := common/log/log.h

common/log/log: common/third_party/google/glog/glog common/auto_.0

.PHONY: common/log/log

headers.common/third_party/google/init/init := common/third_party/google/init/googleinit.h

common/third_party/google/init/init: common/auto_.0

.PHONY: common/third_party/google/init/init

headers.common/base/init := common/base/init.h


.gen-obj/common/base/init.cc.o: .gen-src/common/.dummy .gen-src/.gen-files/common/.dummy .gen-src/.gen-pkg/common/.dummy $(headers.common/third_party/google/gflags/gflags) .gen-obj/common/third_party/google/glog/.glog_gen.0.dummy .gen-obj/common/third_party/google/glog/.glog_gen.1.0.dummy $(headers.common/log/log) $(headers.common/third_party/google/init/init) $(headers.common/base/flags) $(headers.common/base/init) common/base/init.cc .gen-files/.dummy.prereqs
	@mkdir -p .gen-obj/common/base
	@echo "Compiling:  common/base/init.cc (c++)"
	@$(COMPILE.cc) -I -I. -I.gen-files -I.gen-files/common/third_party/google/glog/src -I.gen-src -I.gen-src/.gen-files -I.gen-src/common/third_party/google/glog/src -Icommon/third_party/google/glog/src $(cxx_header_compile_args.common/third_party/google/gflags/gflags) common/base/init.cc -o .gen-obj/common/base/init.cc.o

common/base/init: .gen-obj/common/base/init.cc.o common/log/log common/third_party/google/init/init common/base/flags common/auto_.0

.PHONY: common/base/init

headers.common/third_party/google/re2/re2 := common/third_party/google/re2/stringpiece.h


.gen-obj/common/third_party/google/re2/stringpiece.cc.o: .gen-src/common/.dummy .gen-src/.gen-files/common/.dummy .gen-src/.gen-pkg/common/.dummy $(headers.common/third_party/google/re2/re2) common/third_party/google/re2/stringpiece.cc .gen-files/.dummy.prereqs
	@mkdir -p .gen-obj/common/third_party/google/re2
	@echo "Compiling:  common/third_party/google/re2/stringpiece.cc (c++)"
	@$(COMPILE.cc) -I -I. -I.gen-files -I.gen-src -I.gen-src/.gen-files common/third_party/google/re2/stringpiece.cc -o .gen-obj/common/third_party/google/re2/stringpiece.cc.o


.gen-obj/common/third_party/google/re2/stringprintf.cc.o: .gen-src/common/.dummy .gen-src/.gen-files/common/.dummy .gen-src/.gen-pkg/common/.dummy $(headers.common/third_party/google/re2/re2) common/third_party/google/re2/stringprintf.cc .gen-files/.dummy.prereqs
	@mkdir -p .gen-obj/common/third_party/google/re2
	@echo "Compiling:  common/third_party/google/re2/stringprintf.cc (c++)"
	@$(COMPILE.cc) -I -I. -I.gen-files -I.gen-src -I.gen-src/.gen-files common/third_party/google/re2/stringprintf.cc -o .gen-obj/common/third_party/google/re2/stringprintf.cc.o

common/third_party/google/re2/re2: .gen-obj/common/third_party/google/re2/stringpiece.cc.o .gen-obj/common/third_party/google/re2/stringprintf.cc.o common/auto_.0

.PHONY: common/third_party/google/re2/re2

common/strings/stringpiece: common/third_party/google/re2/re2 common/auto_.0

.PHONY: common/strings/stringpiece


.gen-obj/common/third_party/stringencoders/.stringencoders_conf.0.dummy: .gen-src/common/.dummy .gen-src/.gen-files/common/.dummy .gen-src/.gen-pkg/common/.dummy .gen-files/.dummy.prereqs
	@echo "Autoconf:   //common/third_party/stringencoders:stringencoders_conf.0"
	@(mkdir -p .gen-files/common/third_party/stringencoders; cd common/third_party/stringencoders; GEN_DIR="$(ROOT_DIR)/.gen-files/common/third_party/stringencoders"; OBJ_DIR="$(ROOT_DIR)/.gen-obj/common/third_party/stringencoders"; SRC_DIR="$(ROOT_DIR)/.gen-src/common/third_party/stringencoders" ROOT_DIR="$(ROOT_DIR)"  CXX_GCC="$(CXX_GCC)" CC_GCC="$(CC_GCC)" CC="$(CC)" CXX="$(CXX)" CXXFLAGS="$(CXXFLAGS)" BASIC_CXXFLAGS="$(BASIC_CXXFLAGS)" CFLAGS="$(CFLAGS)" BASIC_CFLAGS="$(BASIC_CFLAGS)" LDFLAGS="$(LDFLAGS)" MAKE="$(MAKE)" DEP_CXXFLAGS="" DEP_CFLAGS="" eval '(mkdir -p $$OBJ_DIR; DEST_DIR=$$GEN_DIR; $(CONFIGURE_ENV.common/third_party/stringencoders/stringencoders_conf) CXXFLAGS="$$BASIC_CXXFLAGS $$DEP_FLAGS $$USER_CXXFLAGS" CFLAGS="$$BASIC_CFLAGS $$DEP_FLAGS $$USER_CFLAGS" LDFLAGS="$$LDFLAGS $$USER_LDFLAGS" CC="$$CC" CXX="$$CXX" ./configure --prefix=/ --cache-file=$$GEN_DIR/config.cache )' > $(ROOT_DIR)/.gen-files/common/third_party/stringencoders.stringencoders_conf.0.logfile 2>&1 || (cat $(ROOT_DIR)/.gen-files/common/third_party/stringencoders.stringencoders_conf.0.logfile; exit 1) ) && (mkdir -p .gen-obj/common/third_party/stringencoders; touch .gen-obj/common/third_party/stringencoders/.stringencoders_conf.0.dummy)

common/third_party/stringencoders/stringencoders_conf.0: .gen-obj/common/third_party/stringencoders/.stringencoders_conf.0.dummy common/auto_.0

.PHONY: common/third_party/stringencoders/stringencoders_conf.0


.gen-obj/common/third_party/stringencoders/.stringencoders_conf.1.0.dummy: .gen-obj/common/third_party/stringencoders/.stringencoders_conf.0.dummy .gen-src/common/.dummy .gen-src/.gen-files/common/.dummy .gen-src/.gen-pkg/common/.dummy .gen-files/.dummy.prereqs
	@echo "Make:       //common/third_party/stringencoders:stringencoders_conf.1.0"
	@(mkdir -p .gen-files/common/third_party/stringencoders; cd common/third_party/stringencoders; GEN_DIR="$(ROOT_DIR)/.gen-files/common/third_party/stringencoders"; OBJ_DIR="$(ROOT_DIR)/.gen-obj/common/third_party/stringencoders"; SRC_DIR="$(ROOT_DIR)/.gen-src/common/third_party/stringencoders" ROOT_DIR="$(ROOT_DIR)"  CXX_GCC="$(CXX_GCC)" CC_GCC="$(CC_GCC)" CC="$(CC)" CXX="$(CXX)" CXXFLAGS="$(CXXFLAGS)" BASIC_CXXFLAGS="$(BASIC_CXXFLAGS)" CFLAGS="$(CFLAGS)" BASIC_CFLAGS="$(BASIC_CFLAGS)" LDFLAGS="$(LDFLAGS)" MAKE="$(MAKE)" DEP_CXXFLAGS="" DEP_CFLAGS="" eval '($$MAKE DESTDIR=$$GEN_DIR -f Makefile install)' > $(ROOT_DIR)/.gen-files/common/third_party/stringencoders.stringencoders_conf.1.0.logfile 2>&1 || (cat $(ROOT_DIR)/.gen-files/common/third_party/stringencoders.stringencoders_conf.1.0.logfile; exit 1) ) && (mkdir -p .gen-obj/common/third_party/stringencoders; touch .gen-obj/common/third_party/stringencoders/.stringencoders_conf.1.0.dummy)

common/third_party/stringencoders/stringencoders_conf.1.0: .gen-obj/common/third_party/stringencoders/.stringencoders_conf.1.0.dummy common/third_party/stringencoders/stringencoders_conf.0 common/auto_.0

.PHONY: common/third_party/stringencoders/stringencoders_conf.1.0


.gen-files/common/third_party/stringencoders/lib/libmodpbase64.a: .gen-obj/common/third_party/stringencoders/.stringencoders_conf.1.0.dummy .gen-files/.dummy.prereqs

common/third_party/stringencoders/stringencoders_conf.1: common/third_party/stringencoders/stringencoders_conf.0 common/third_party/stringencoders/stringencoders_conf.1.0 common/auto_.0

.PHONY: common/third_party/stringencoders/stringencoders_conf.1

CONFIGURE_ENV.common/third_party/stringencoders/stringencoders_conf := 
ifeq ($(CXX_GCC),1)
	CONFIGURE_ENV.common/third_party/stringencoders/stringencoders_conf := USER_CFLAGS=-Wno-error=unused-but-set-variable
endif

common/third_party/stringencoders/stringencoders_conf: common/third_party/stringencoders/stringencoders_conf.0 common/third_party/stringencoders/stringencoders_conf.1 common/auto_.0

.PHONY: common/third_party/stringencoders/stringencoders_conf

headers.common/third_party/stringencoders/stringencoders := common/third_party/stringencoders/src/arraytoc.h common/third_party/stringencoders/src/modp_ascii.h common/third_party/stringencoders/src/modp_b16.h common/third_party/stringencoders/src/modp_b2.h common/third_party/stringencoders/src/modp_b64.h common/third_party/stringencoders/src/modp_b64w.h common/third_party/stringencoders/src/modp_b85.h common/third_party/stringencoders/src/modp_bjavascript.h common/third_party/stringencoders/src/modp_burl.h common/third_party/stringencoders/src/modp_mainpage.h common/third_party/stringencoders/src/modp_numtoa.h

common/third_party/stringencoders/stringencoders: common/third_party/stringencoders/stringencoders_conf common/auto_.0

.PHONY: common/third_party/stringencoders/stringencoders

headers.common/strings/strutil := common/strings/strutil.h common/strings/path.h common/strings/varmap.h


.gen-obj/common/strings/strutil.cc.o: .gen-obj/common/third_party/stringencoders/.stringencoders_conf.0.dummy .gen-obj/common/third_party/stringencoders/.stringencoders_conf.1.0.dummy .gen-src/common/.dummy .gen-src/.gen-files/common/.dummy .gen-src/.gen-pkg/common/.dummy $(headers.common/third_party/stringencoders/stringencoders) $(headers.common/third_party/google/re2/re2) $(headers.common/strings/strutil) common/strings/strutil.cc .gen-files/.dummy.prereqs
	@mkdir -p .gen-obj/common/strings
	@echo "Compiling:  common/strings/strutil.cc (c++)"
	@$(COMPILE.cc) -I -I. -I.gen-files -I.gen-src -I.gen-src/.gen-files common/strings/strutil.cc -o .gen-obj/common/strings/strutil.cc.o


.gen-obj/common/strings/path.cc.o: .gen-obj/common/third_party/stringencoders/.stringencoders_conf.0.dummy .gen-obj/common/third_party/stringencoders/.stringencoders_conf.1.0.dummy .gen-src/common/.dummy .gen-src/.gen-files/common/.dummy .gen-src/.gen-pkg/common/.dummy $(headers.common/third_party/stringencoders/stringencoders) $(headers.common/third_party/google/re2/re2) $(headers.common/strings/strutil) common/strings/path.cc .gen-files/.dummy.prereqs
	@mkdir -p .gen-obj/common/strings
	@echo "Compiling:  common/strings/path.cc (c++)"
	@$(COMPILE.cc) -I -I. -I.gen-files -I.gen-src -I.gen-src/.gen-files common/strings/path.cc -o .gen-obj/common/strings/path.cc.o


.gen-obj/common/strings/varmap.cc.o: .gen-obj/common/third_party/stringencoders/.stringencoders_conf.0.dummy .gen-obj/common/third_party/stringencoders/.stringencoders_conf.1.0.dummy .gen-src/common/.dummy .gen-src/.gen-files/common/.dummy .gen-src/.gen-pkg/common/.dummy $(headers.common/third_party/stringencoders/stringencoders) $(headers.common/third_party/google/re2/re2) $(headers.common/strings/strutil) common/strings/varmap.cc .gen-files/.dummy.prereqs
	@mkdir -p .gen-obj/common/strings
	@echo "Compiling:  common/strings/varmap.cc (c++)"
	@$(COMPILE.cc) -I -I. -I.gen-files -I.gen-src -I.gen-src/.gen-files common/strings/varmap.cc -o .gen-obj/common/strings/varmap.cc.o

common/strings/strutil: .gen-obj/common/strings/strutil.cc.o .gen-obj/common/strings/path.cc.o .gen-obj/common/strings/varmap.cc.o common/third_party/stringencoders/stringencoders common/strings/stringpiece common/auto_.0

.PHONY: common/strings/strutil

headers.common/file/linereader := common/file/linereader.h


.gen-obj/common/file/linereader.cc.o: .gen-src/common/.dummy .gen-src/.gen-files/common/.dummy .gen-src/.gen-pkg/common/.dummy $(headers.common/third_party/google/gflags/gflags) .gen-obj/common/third_party/google/glog/.glog_gen.0.dummy .gen-obj/common/third_party/google/glog/.glog_gen.1.0.dummy $(headers.common/log/log) $(headers.common/file/linereader) common/file/linereader.cc .gen-files/.dummy.prereqs
	@mkdir -p .gen-obj/common/file
	@echo "Compiling:  common/file/linereader.cc (c++)"
	@$(COMPILE.cc) -I -I. -I.gen-files -I.gen-files/common/third_party/google/glog/src -I.gen-src -I.gen-src/.gen-files -I.gen-src/common/third_party/google/glog/src -Icommon/third_party/google/glog/src $(cxx_header_compile_args.common/third_party/google/gflags/gflags) common/file/linereader.cc -o .gen-obj/common/file/linereader.cc.o

common/file/linereader: .gen-obj/common/file/linereader.cc.o common/log/log common/auto_.0

.PHONY: common/file/linereader


.gen-src/third_party: .gen-files/.dummy.prereqs
	@mkdir -p .gen-src; [ -d third_party ] || mkdir -p third_party; ln -f -s ../third_party .gen-src/third_party


.gen-src/third_party/.dummy: .gen-src/third_party .gen-files/.dummy.prereqs
	@[ -f .gen-src/third_party/.dummy ] || touch .gen-src/third_party/.dummy


.gen-src/.gen-pkg/third_party: .gen-files/.dummy.prereqs
	@mkdir -p .gen-src/.gen-pkg; [ -d .gen-pkg/third_party ] || mkdir -p .gen-pkg/third_party; ln -f -s ../../.gen-pkg/third_party .gen-src/.gen-pkg/third_party


.gen-src/.gen-pkg/third_party/.dummy: .gen-src/.gen-pkg/third_party .gen-files/.dummy.prereqs
	@[ -f .gen-src/.gen-pkg/third_party/.dummy ] || touch .gen-src/.gen-pkg/third_party/.dummy


.gen-src/.gen-files/third_party: .gen-files/.dummy.prereqs
	@mkdir -p .gen-src/.gen-files; [ -d .gen-files/third_party ] || mkdir -p .gen-files/third_party; ln -f -s ../../.gen-files/third_party .gen-src/.gen-files/third_party


.gen-src/.gen-files/third_party/.dummy: .gen-src/.gen-files/third_party .gen-files/.dummy.prereqs
	@[ -f .gen-src/.gen-files/third_party/.dummy ] || touch .gen-src/.gen-files/third_party/.dummy

third_party/auto_.0: .gen-src/third_party .gen-src/.gen-pkg/third_party .gen-src/.gen-files/third_party

.PHONY: third_party/auto_.0


.gen-obj/third_party/leveldb/.leveldb_make.0.dummy: .gen-src/third_party/.dummy .gen-src/.gen-files/third_party/.dummy .gen-src/.gen-pkg/third_party/.dummy .gen-files/.dummy.prereqs
	@echo "Make:       //third_party/leveldb:leveldb_make.0"
	@(mkdir -p .gen-files/third_party/leveldb; cd third_party/leveldb; GEN_DIR="$(ROOT_DIR)/.gen-files/third_party/leveldb"; OBJ_DIR="$(ROOT_DIR)/.gen-obj/third_party/leveldb"; SRC_DIR="$(ROOT_DIR)/.gen-src/third_party/leveldb" ROOT_DIR="$(ROOT_DIR)"  CXX_GCC="$(CXX_GCC)" CC_GCC="$(CC_GCC)" CC="$(CC)" CXX="$(CXX)" CXXFLAGS="$(CXXFLAGS)" BASIC_CXXFLAGS="$(BASIC_CXXFLAGS)" CFLAGS="$(CFLAGS)" BASIC_CFLAGS="$(BASIC_CFLAGS)" LDFLAGS="$(LDFLAGS)" MAKE="$(MAKE)" DEP_CXXFLAGS="" DEP_CFLAGS="" eval '($$MAKE DESTDIR=$$GEN_DIR -f Makefile all)' > $(ROOT_DIR)/.gen-files/third_party/leveldb.leveldb_make.0.logfile 2>&1 || (cat $(ROOT_DIR)/.gen-files/third_party/leveldb.leveldb_make.0.logfile; exit 1) ) && (mkdir -p .gen-obj/third_party/leveldb; touch .gen-obj/third_party/leveldb/.leveldb_make.0.dummy)

third_party/leveldb/leveldb_make.0: .gen-obj/third_party/leveldb/.leveldb_make.0.dummy third_party/auto_.0

.PHONY: third_party/leveldb/leveldb_make.0


third_party/leveldb/libleveldb.a: .gen-obj/third_party/leveldb/.leveldb_make.0.dummy .gen-files/.dummy.prereqs

third_party/leveldb/leveldb_make: third_party/leveldb/leveldb_make.0 third_party/auto_.0

.PHONY: third_party/leveldb/leveldb_make

headers.third_party/leveldb/leveldb := third_party/leveldb/include/leveldb/c.h third_party/leveldb/include/leveldb/cache.h third_party/leveldb/include/leveldb/comparator.h third_party/leveldb/include/leveldb/db.h third_party/leveldb/include/leveldb/env.h third_party/leveldb/include/leveldb/filter_policy.h third_party/leveldb/include/leveldb/iterator.h third_party/leveldb/include/leveldb/options.h third_party/leveldb/include/leveldb/slice.h third_party/leveldb/include/leveldb/status.h third_party/leveldb/include/leveldb/table.h third_party/leveldb/include/leveldb/table_builder.h third_party/leveldb/include/leveldb/write_batch.h

third_party/leveldb/leveldb: third_party/leveldb/leveldb_make third_party/auto_.0

.PHONY: third_party/leveldb/leveldb

headers.alec := alec.h


.gen-obj/alec.cc.o: .gen-src/common/.dummy .gen-src/.gen-files/common/.dummy .gen-src/.gen-pkg/common/.dummy $(headers.common/third_party/google/gflags/gflags) $(headers.common/base/flags) .gen-obj/common/third_party/google/glog/.glog_gen.0.dummy .gen-obj/common/third_party/google/glog/.glog_gen.1.0.dummy $(headers.common/log/log) $(headers.common/third_party/google/init/init) $(headers.common/base/init) $(headers.common/third_party/google/re2/re2) .gen-obj/common/third_party/stringencoders/.stringencoders_conf.0.dummy .gen-obj/common/third_party/stringencoders/.stringencoders_conf.1.0.dummy $(headers.common/third_party/stringencoders/stringencoders) $(headers.common/strings/strutil) $(headers.common/file/linereader) .gen-obj/third_party/leveldb/.leveldb_make.0.dummy .gen-src/third_party/.dummy .gen-src/.gen-files/third_party/.dummy .gen-src/.gen-pkg/third_party/.dummy $(headers.third_party/leveldb/leveldb) $(headers.alec) alec.cc .gen-files/.dummy.prereqs
	@mkdir -p .gen-obj
	@echo "Compiling:  alec.cc (c++)"
	@$(COMPILE.cc) -I -I. -I.gen-files -I.gen-files/common/third_party/google/glog/src -I.gen-files/third_party/leveldb/include -I.gen-src -I.gen-src/.gen-files -I.gen-src/common/third_party/google/glog/src -I.gen-src/third_party/leveldb/include -Icommon/third_party/google/glog/src -Ithird_party/leveldb/include $(cxx_header_compile_args.common/third_party/google/gflags/gflags) alec.cc -o .gen-obj/alec.cc.o

alec: .gen-obj/alec.cc.o common/base/flags common/base/init common/log/log common/strings/stringpiece common/strings/strutil common/file/linereader third_party/leveldb/leveldb

.PHONY: alec


alec_main: .gen-obj/alec_main .gen-files/.dummy.prereqs
	@ln -f -s .gen-obj/alec_main alec_main


bin/alec_main: .gen-obj/alec_main .gen-files/.dummy.prereqs
	@mkdir -p bin
	@ln -f -s ../.gen-obj/alec_main bin/alec_main

alec_main.0:

.PHONY: alec_main.0


.gen-obj/alec_main.cc.o: .gen-src/common/.dummy .gen-src/.gen-files/common/.dummy .gen-src/.gen-pkg/common/.dummy $(headers.common/third_party/google/gflags/gflags) $(headers.common/base/flags) .gen-obj/common/third_party/google/glog/.glog_gen.0.dummy .gen-obj/common/third_party/google/glog/.glog_gen.1.0.dummy $(headers.common/log/log) $(headers.common/third_party/google/init/init) $(headers.common/base/init) $(headers.common/third_party/google/re2/re2) .gen-obj/common/third_party/stringencoders/.stringencoders_conf.0.dummy .gen-obj/common/third_party/stringencoders/.stringencoders_conf.1.0.dummy $(headers.common/third_party/stringencoders/stringencoders) $(headers.common/strings/strutil) $(headers.common/file/linereader) .gen-obj/third_party/leveldb/.leveldb_make.0.dummy .gen-src/third_party/.dummy .gen-src/.gen-files/third_party/.dummy .gen-src/.gen-pkg/third_party/.dummy $(headers.third_party/leveldb/leveldb) $(headers.alec) alec_main.cc .gen-files/.dummy.prereqs
	@mkdir -p .gen-obj
	@echo "Compiling:  alec_main.cc (c++)"
	@$(COMPILE.cc) -I -I. -I.gen-files -I.gen-files/common/third_party/google/glog/src -I.gen-files/third_party/leveldb/include -I.gen-src -I.gen-src/.gen-files -I.gen-src/common/third_party/google/glog/src -I.gen-src/third_party/leveldb/include -Icommon/third_party/google/glog/src -Ithird_party/leveldb/include $(cxx_header_compile_args.common/third_party/google/gflags/gflags) alec_main.cc -o .gen-obj/alec_main.cc.o


.gen-obj/alec_main: .gen-obj/common/third_party/google/gflags/src/gflags.cc.o .gen-obj/common/third_party/google/gflags/src/gflags_completions.cc.o .gen-obj/common/third_party/google/gflags/src/gflags_nc.cc.o .gen-obj/common/third_party/google/gflags/src/gflags_reporting.cc.o .gen-files/common/third_party/google/glog/lib/libglog.a .gen-obj/common/base/init.cc.o .gen-obj/common/third_party/google/re2/stringpiece.cc.o .gen-obj/common/third_party/google/re2/stringprintf.cc.o .gen-files/common/third_party/stringencoders/lib/libmodpbase64.a .gen-obj/common/strings/strutil.cc.o .gen-obj/common/strings/path.cc.o .gen-obj/common/strings/varmap.cc.o .gen-obj/common/file/linereader.cc.o third_party/leveldb/libleveldb.a .gen-obj/alec.cc.o .gen-obj/alec_main.cc.o .gen-files/.dummy.prereqs
	@echo "Linking:    .gen-obj/alec_main"
	@mkdir -p .gen-obj
	@$(LINK.cc)  .gen-obj/alec_main.cc.o .gen-obj/alec.cc.o third_party/leveldb/libleveldb.a .gen-obj/common/file/linereader.cc.o .gen-obj/common/strings/varmap.cc.o .gen-obj/common/strings/path.cc.o .gen-obj/common/strings/strutil.cc.o .gen-files/common/third_party/stringencoders/lib/libmodpbase64.a .gen-obj/common/third_party/google/re2/stringprintf.cc.o .gen-obj/common/third_party/google/re2/stringpiece.cc.o .gen-obj/common/base/init.cc.o .gen-files/common/third_party/google/glog/lib/libglog.a .gen-obj/common/third_party/google/gflags/src/gflags_reporting.cc.o .gen-obj/common/third_party/google/gflags/src/gflags_nc.cc.o .gen-obj/common/third_party/google/gflags/src/gflags_completions.cc.o .gen-obj/common/third_party/google/gflags/src/gflags.cc.o -o .gen-obj/alec_main


.gen-files/common/.git_tree.dummy: .gen-files/flock_script.pl
	@[ -f common/.git ] || echo "Sourcing:   //common (git submodule)"
	@[ -d common -a ! -f common/.git -a  -e .git ] && (touch .gen-files/.gitlock; .gen-files/flock_script.pl .gen-files/.gitlock 'cd .; git submodule update --init common || exit 1'); true
	@mkdir -p .gen-files/common
	@[ -f .gen-files/common/.git_tree.dummy ] || touch -t 197101010000 .gen-files/common/.git_tree.dummy


common/BUILD: .gen-files/common/.git_tree.dummy


common/base/BUILD: .gen-files/common/.git_tree.dummy


common/base/atomicops.h: .gen-files/common/.git_tree.dummy


common/base/callback.h: .gen-files/common/.git_tree.dummy


common/base/flags.h: .gen-files/common/.git_tree.dummy


common/base/flags.py: .gen-files/common/.git_tree.dummy


common/base/init.cc: .gen-files/common/.git_tree.dummy


common/base/init.h: .gen-files/common/.git_tree.dummy


common/base/macros.h: .gen-files/common/.git_tree.dummy


common/base/mutex.h: .gen-files/common/.git_tree.dummy


common/base/rdtsc.h: .gen-files/common/.git_tree.dummy


common/base/time.cc: .gen-files/common/.git_tree.dummy


common/base/time.h: .gen-files/common/.git_tree.dummy


common/base/types.h: .gen-files/common/.git_tree.dummy


common/file/BUILD: .gen-files/common/.git_tree.dummy


common/file/fileutil.cc: .gen-files/common/.git_tree.dummy


common/file/fileutil.h: .gen-files/common/.git_tree.dummy


common/file/linereader.cc: .gen-files/common/.git_tree.dummy


common/file/linereader.h: .gen-files/common/.git_tree.dummy


common/log/BUILD: .gen-files/common/.git_tree.dummy


common/log/log.h: .gen-files/common/.git_tree.dummy


common/strings/BUILD: .gen-files/common/.git_tree.dummy


common/strings/path.cc: .gen-files/common/.git_tree.dummy


common/strings/path.h: .gen-files/common/.git_tree.dummy


common/strings/strutil.cc: .gen-files/common/.git_tree.dummy


common/strings/strutil.h: .gen-files/common/.git_tree.dummy


common/strings/varmap.cc: .gen-files/common/.git_tree.dummy


common/strings/varmap.h: .gen-files/common/.git_tree.dummy


common/third_party/BUILD: .gen-files/common/.git_tree.dummy


common/third_party/google/BUILD: .gen-files/common/.git_tree.dummy


common/third_party/google/gflags/BUILD: .gen-files/common/.git_tree.dummy


common/third_party/google/gflags/src/gflags.cc: .gen-files/common/.git_tree.dummy


common/third_party/google/gflags/src/gflags_completions.cc: .gen-files/common/.git_tree.dummy


common/third_party/google/gflags/src/gflags_nc.cc: .gen-files/common/.git_tree.dummy


common/third_party/google/gflags/src/gflags_reporting.cc: .gen-files/common/.git_tree.dummy


common/third_party/google/gflags/src/google/gflags.h: .gen-files/common/.git_tree.dummy


common/third_party/google/gflags/src/google/gflags_completions.h: .gen-files/common/.git_tree.dummy


common/third_party/google/gflags/src/util.h: .gen-files/common/.git_tree.dummy


common/third_party/google/glog/BUILD: .gen-files/common/.git_tree.dummy


common/third_party/google/glog/src: .gen-files/common/.git_tree.dummy


common/third_party/google/init/BUILD: .gen-files/common/.git_tree.dummy


common/third_party/google/init/googleinit.h: .gen-files/common/.git_tree.dummy


common/third_party/google/re2/BUILD: .gen-files/common/.git_tree.dummy


common/third_party/google/re2/stringpiece.cc: .gen-files/common/.git_tree.dummy


common/third_party/google/re2/stringpiece.h: .gen-files/common/.git_tree.dummy


common/third_party/google/re2/stringprintf.cc: .gen-files/common/.git_tree.dummy


common/third_party/stringencoders/BUILD: .gen-files/common/.git_tree.dummy


common/third_party/stringencoders/src/arraytoc.h: .gen-files/common/.git_tree.dummy


common/third_party/stringencoders/src/modp_ascii.h: .gen-files/common/.git_tree.dummy


common/third_party/stringencoders/src/modp_b16.h: .gen-files/common/.git_tree.dummy


common/third_party/stringencoders/src/modp_b2.h: .gen-files/common/.git_tree.dummy


common/third_party/stringencoders/src/modp_b64.h: .gen-files/common/.git_tree.dummy


common/third_party/stringencoders/src/modp_b64w.h: .gen-files/common/.git_tree.dummy


common/third_party/stringencoders/src/modp_b85.h: .gen-files/common/.git_tree.dummy


common/third_party/stringencoders/src/modp_bjavascript.h: .gen-files/common/.git_tree.dummy


common/third_party/stringencoders/src/modp_burl.h: .gen-files/common/.git_tree.dummy


common/third_party/stringencoders/src/modp_mainpage.h: .gen-files/common/.git_tree.dummy


common/third_party/stringencoders/src/modp_numtoa.h: .gen-files/common/.git_tree.dummy


.gen-files/third_party/.git_tree.dummy: .gen-files/flock_script.pl
	@[ -f third_party/.git ] || echo "Sourcing:   //third_party (git submodule)"
	@[ -d third_party -a ! -f third_party/.git -a  -e .git ] && (touch .gen-files/.gitlock; .gen-files/flock_script.pl .gen-files/.gitlock 'cd .; git submodule update --init third_party || exit 1'); true
	@mkdir -p .gen-files/third_party
	@[ -f .gen-files/third_party/.git_tree.dummy ] || touch -t 197101010000 .gen-files/third_party/.git_tree.dummy


third_party/BUILD: .gen-files/third_party/.git_tree.dummy


third_party/leveldb/BUILD: .gen-files/third_party/.git_tree.dummy


third_party/leveldb/include: .gen-files/third_party/.git_tree.dummy


third_party/leveldb/include/leveldb/c.h: .gen-files/third_party/.git_tree.dummy


third_party/leveldb/include/leveldb/cache.h: .gen-files/third_party/.git_tree.dummy


third_party/leveldb/include/leveldb/comparator.h: .gen-files/third_party/.git_tree.dummy


third_party/leveldb/include/leveldb/db.h: .gen-files/third_party/.git_tree.dummy


third_party/leveldb/include/leveldb/env.h: .gen-files/third_party/.git_tree.dummy


third_party/leveldb/include/leveldb/filter_policy.h: .gen-files/third_party/.git_tree.dummy


third_party/leveldb/include/leveldb/iterator.h: .gen-files/third_party/.git_tree.dummy


third_party/leveldb/include/leveldb/options.h: .gen-files/third_party/.git_tree.dummy


third_party/leveldb/include/leveldb/slice.h: .gen-files/third_party/.git_tree.dummy


third_party/leveldb/include/leveldb/status.h: .gen-files/third_party/.git_tree.dummy


third_party/leveldb/include/leveldb/table.h: .gen-files/third_party/.git_tree.dummy


third_party/leveldb/include/leveldb/table_builder.h: .gen-files/third_party/.git_tree.dummy


third_party/leveldb/include/leveldb/write_batch.h: .gen-files/third_party/.git_tree.dummy


third_party/leveldb/test.cc: .gen-files/third_party/.git_tree.dummy


clean: .gen-files/.dummy.prereqs
	@rm -rf .gen-src/common/.dummy
	@rm -rf .gen-src/.gen-files/common/.dummy
	@rm -rf .gen-src/.gen-pkg/common/.dummy
	-@(mkdir -p .gen-files/common/third_party/google/glog; cd common/third_party/google/glog; GEN_DIR="$(ROOT_DIR)/.gen-files/common/third_party/google/glog"; OBJ_DIR="$(ROOT_DIR)/.gen-obj/common/third_party/google/glog"; SRC_DIR="$(ROOT_DIR)/.gen-src/common/third_party/google/glog" ROOT_DIR="$(ROOT_DIR)"  CXX_GCC="$(CXX_GCC)" CC_GCC="$(CC_GCC)" CC="$(CC)" CXX="$(CXX)" CXXFLAGS="$(CXXFLAGS)" BASIC_CXXFLAGS="$(BASIC_CXXFLAGS)" CFLAGS="$(CFLAGS)" BASIC_CFLAGS="$(BASIC_CFLAGS)" LDFLAGS="$(LDFLAGS)" MAKE="$(MAKE)" GFLAGS_OBJS=".gen-obj/common/third_party/google/gflags/src/*.o" GFLAGS_SRC_ROOT="common/third_party/google/gflags/src"  eval '($$MAKE DESTDIR=$$GEN_DIR clean > /dev/null 2>&1 || echo -n "")' > $(ROOT_DIR)/.gen-files/common/third_party/google/glog.glog_gen.1.0.logfile 2>&1 || (cat $(ROOT_DIR)/.gen-files/common/third_party/google/glog.glog_gen.1.0.logfile; exit 1) )
	-@(mkdir -p .gen-files/common/third_party/stringencoders; cd common/third_party/stringencoders; GEN_DIR="$(ROOT_DIR)/.gen-files/common/third_party/stringencoders"; OBJ_DIR="$(ROOT_DIR)/.gen-obj/common/third_party/stringencoders"; SRC_DIR="$(ROOT_DIR)/.gen-src/common/third_party/stringencoders" ROOT_DIR="$(ROOT_DIR)"  CXX_GCC="$(CXX_GCC)" CC_GCC="$(CC_GCC)" CC="$(CC)" CXX="$(CXX)" CXXFLAGS="$(CXXFLAGS)" BASIC_CXXFLAGS="$(BASIC_CXXFLAGS)" CFLAGS="$(CFLAGS)" BASIC_CFLAGS="$(BASIC_CFLAGS)" LDFLAGS="$(LDFLAGS)" MAKE="$(MAKE)"  eval '($$MAKE DESTDIR=$$GEN_DIR clean > /dev/null 2>&1 || echo -n "")' > $(ROOT_DIR)/.gen-files/common/third_party/stringencoders.stringencoders_conf.1.0.logfile 2>&1 || (cat $(ROOT_DIR)/.gen-files/common/third_party/stringencoders.stringencoders_conf.1.0.logfile; exit 1) )
	@rm -rf .gen-src/third_party/.dummy
	@rm -rf .gen-src/.gen-files/third_party/.dummy
	@rm -rf .gen-src/.gen-pkg/third_party/.dummy
	-@(mkdir -p .gen-files/third_party/leveldb; cd third_party/leveldb; GEN_DIR="$(ROOT_DIR)/.gen-files/third_party/leveldb"; OBJ_DIR="$(ROOT_DIR)/.gen-obj/third_party/leveldb"; SRC_DIR="$(ROOT_DIR)/.gen-src/third_party/leveldb" ROOT_DIR="$(ROOT_DIR)"  CXX_GCC="$(CXX_GCC)" CC_GCC="$(CC_GCC)" CC="$(CC)" CXX="$(CXX)" CXXFLAGS="$(CXXFLAGS)" BASIC_CXXFLAGS="$(BASIC_CXXFLAGS)" CFLAGS="$(CFLAGS)" BASIC_CFLAGS="$(BASIC_CFLAGS)" LDFLAGS="$(LDFLAGS)" MAKE="$(MAKE)"  eval '($$MAKE DESTDIR=$$GEN_DIR clean > /dev/null 2>&1 || echo -n "")' > $(ROOT_DIR)/.gen-files/third_party/leveldb.leveldb_make.0.logfile 2>&1 || (cat $(ROOT_DIR)/.gen-files/third_party/leveldb.leveldb_make.0.logfile; exit 1) )
	@[ -L alec_main ] && rm -f alec_main || true
	@[ -L bin/alec_main ] && rm -f bin/alec_main || true
	@rm -rf .gen-obj
	@rm -rf bin
	@rm -rf .gen-files
	@rm -rf .gen-src
	@rm -rf .gen-pkg

# http://www.gnu.org/prep/standards/standards.html
prefix=/usr/local
exec_prefix=$(prefix)
bindir=$(exec_prefix)/bin
includedir=$(prefix)/include
libdir=$(exec_prefix)/lib
INSTALL=install
INSTALL_PROGRAM=$(INSTALL)
INSTALL_DATA=$(INSTALL) -m 644


install: .gen-files/.dummy.prereqs alec_main
	@mkdir -p $(DESTDIR)$(bindir)
	@$(INSTALL_PROGRAM) .gen-obj/alec_main $(DESTDIR)$(bindir)/alec_main


all: alec_main bin/alec_main .gen-files/.dummy.prereqs


tests: .gen-files/.dummy.prereqs


licenses: 
	@echo "License information."
	@printf "//:alec_main =>\n    http://opensource.org/licenses/BSD-3-Clause\n\n"

.PHONY: clean all tests install licenses

.DEFAULT_GOAL=all


.gen-files/.dummy.prereqs: .gen-files/common/.git_tree.dummy .gen-files/third_party/.git_tree.dummy
	@mkdir -p .gen-files
	@touch .gen-files/.dummy.prereqs


prereqs: .gen-files/.dummy.prereqs

.PHONY: prereqs

